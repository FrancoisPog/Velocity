package fr.ufc.l3info.oprog;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import java.io.File;
import java.io.IOException;

public class ExploitantTest {
    private Ville villeSimple;
    private Ville villeBesancon;
    private Exploitant exploitant;

    private final String path = "./target/classes/data/stationsVille/";

    @Before
    public void setUp() throws IOException {
        this.villeSimple = new Ville();
        this.villeSimple.initialiser(new File(path + "stationVilleSimple.txt"));
        this.villeBesancon = new Ville();
        this.villeBesancon.initialiser(new File(path + "stationsBesanconSimple.txt"));

        this.exploitant = new Exploitant();
    }

    @Test
    public void testVilleSimple() {
        for (int i = 0; i < 7; i++) {
            this.exploitant.acquerirVelo(new Velo());
        }

        this.exploitant.ravitailler(this.villeSimple);

        Station st = this.villeSimple.getStation("Station gare Viotte");
        Assert.assertEquals(st.capacite() / 2, st.nbBornesLibres());
    }

    @Test
    public void testVilleSimple_Entretenir() {
        for (int i = 0; i < 7; i++) {
            Velo v = new Velo();
            v.abimer();
            this.exploitant.acquerirVelo(v);
        }

        this.exploitant.entretenirVelos();
        this.exploitant.ravitailler(this.villeSimple);

        Station st = this.villeSimple.getStation("Station gare Viotte");
        Assert.assertEquals(st.capacite() / 2, st.nbBornesLibres());
        for (int i = 0; i < st.capacite(); i++) {
            if (st.veloALaBorne(i + 1) == null) {
                continue;
            }
            Assert.assertFalse(st.veloALaBorne(i + 1).estAbime());
        }
    }

    @Test
    public void testVilleBesancon_PlusieursStations() {
        for (int i = 0; i < 20; i++) {
            this.exploitant.acquerirVelo(new Velo());
        }

        this.exploitant.ravitailler(this.villeBesancon);
        for (Station st: this.villeBesancon) {
            Assert.assertEquals(st.capacite() / 2, st.nbBornesLibres());
        }
    }
}
